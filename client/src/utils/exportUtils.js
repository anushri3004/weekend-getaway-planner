import jsPDF from 'jspdf';
import { Document, Packer, Paragraph, TextRun, HeadingLevel, Table, TableRow, TableCell, WidthType, AlignmentType } from 'docx';
import { saveAs } from 'file-saver';

/**
 * Parse markdown itinerary content to extract structured data
 */
function parseItinerary(markdownContent, destination) {
  const lines = markdownContent.split('\n');
  const parsed = {
    destination,
    whyVisit: '',
    days: []
  };

  let currentSection = null;
  let currentDay = null;

  lines.forEach(line => {
    const trimmed = line.trim();

    // Extract "Why Visit" section
    if (trimmed.startsWith('**Why Visit:**') || trimmed.startsWith('Why Visit:')) {
      currentSection = 'whyVisit';
      const content = trimmed.replace(/\*\*Why Visit:\*\*|Why Visit:/, '').trim();
      if (content) parsed.whyVisit = content;
      return;
    }

    if (currentSection === 'whyVisit' && trimmed && !trimmed.includes('|')) {
      parsed.whyVisit += ' ' + trimmed;
      return;
    }

    // Detect day headers
    if (trimmed.match(/^\|\s*\d+\s*\|/) || trimmed.match(/^Day \d+/)) {
      currentSection = 'itinerary';
    }
  });

  return parsed;
}

/**
 * Export itinerary as PDF
 */
export async function exportToPDF(itineraryContent, destination, userPreferences) {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const margin = 20;
  let yPosition = 20;

  // Title
  doc.setFontSize(22);
  doc.setFont(undefined, 'bold');
  doc.text(`${destination} - Weekend Itinerary`, margin, yPosition);
  yPosition += 10;

  // Dates
  if (userPreferences?.startDate && userPreferences?.endDate) {
    doc.setFontSize(10);
    doc.setFont(undefined, 'normal');
    doc.setTextColor(100, 100, 100);
    doc.text(`Travel Dates: ${formatDate(userPreferences.startDate)} - ${formatDate(userPreferences.endDate)}`, margin, yPosition);
    yPosition += 8;
  }

  // Budget
  if (userPreferences?.budget) {
    doc.text(`Budget: ₹${userPreferences.budget.toLocaleString()}`, margin, yPosition);
    yPosition += 8;
  }

  yPosition += 5;
  doc.setTextColor(0, 0, 0);

  // Content - split by lines and add to PDF
  const lines = itineraryContent.split('\n');
  doc.setFontSize(10);

  for (let line of lines) {
    const trimmed = line.trim();

    // Skip table borders and empty lines
    if (!trimmed || trimmed.match(/^[\|\-\s]+$/)) continue;

    // Headers
    if (trimmed.startsWith('**') && trimmed.endsWith('**')) {
      if (yPosition > 270) {
        doc.addPage();
        yPosition = 20;
      }
      doc.setFont(undefined, 'bold');
      doc.setFontSize(12);
      const text = trimmed.replace(/\*\*/g, '');
      doc.text(text, margin, yPosition);
      yPosition += 7;
      doc.setFont(undefined, 'normal');
      doc.setFontSize(10);
      continue;
    }

    // Regular text
    if (yPosition > 280) {
      doc.addPage();
      yPosition = 20;
    }

    // Handle long lines - split them
    const maxWidth = pageWidth - (margin * 2);
    const splitText = doc.splitTextToSize(trimmed, maxWidth);

    splitText.forEach(textLine => {
      if (yPosition > 280) {
        doc.addPage();
        yPosition = 20;
      }
      doc.text(textLine, margin, yPosition);
      yPosition += 6;
    });
  }

  // Footer
  const pageCount = doc.internal.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(150, 150, 150);
    doc.text(
      `Generated by Weekend Getaway Planner - Page ${i} of ${pageCount}`,
      pageWidth / 2,
      doc.internal.pageSize.getHeight() - 10,
      { align: 'center' }
    );
  }

  // Save the PDF
  const filename = `${destination.replace(/\s/g, '_')}_Itinerary.pdf`;
  doc.save(filename);
}

/**
 * Export itinerary as Word document
 */
export async function exportToWord(itineraryContent, destination, userPreferences) {
  const children = [];

  // Title
  children.push(
    new Paragraph({
      text: `${destination} - Weekend Itinerary`,
      heading: HeadingLevel.HEADING_1,
      spacing: { after: 200 }
    })
  );

  // Travel Details
  if (userPreferences?.startDate && userPreferences?.endDate) {
    children.push(
      new Paragraph({
        children: [
          new TextRun({
            text: `Travel Dates: ${formatDate(userPreferences.startDate)} - ${formatDate(userPreferences.endDate)}`,
            size: 20
          })
        ],
        spacing: { after: 100 }
      })
    );
  }

  if (userPreferences?.budget) {
    children.push(
      new Paragraph({
        children: [
          new TextRun({
            text: `Budget: ₹${userPreferences.budget.toLocaleString()}`,
            size: 20
          })
        ],
        spacing: { after: 200 }
      })
    );
  }

  // Content - parse and add
  const lines = itineraryContent.split('\n');

  for (let line of lines) {
    const trimmed = line.trim();

    // Skip empty lines and table borders
    if (!trimmed || trimmed.match(/^[\|\-\s]+$/)) continue;

    // Bold headers
    if (trimmed.startsWith('**') && trimmed.endsWith('**')) {
      children.push(
        new Paragraph({
          children: [
            new TextRun({
              text: trimmed.replace(/\*\*/g, ''),
              bold: true,
              size: 24
            })
          ],
          spacing: { before: 200, after: 100 }
        })
      );
      continue;
    }

    // Regular paragraphs
    children.push(
      new Paragraph({
        children: [
          new TextRun({
            text: trimmed,
            size: 22
          })
        ],
        spacing: { after: 100 }
      })
    );
  }

  // Footer
  children.push(
    new Paragraph({
      children: [
        new TextRun({
          text: '\n\nGenerated by Weekend Getaway Planner',
          italics: true,
          size: 18,
          color: '999999'
        })
      ],
      alignment: AlignmentType.CENTER,
      spacing: { before: 400 }
    })
  );

  // Create document
  const doc = new Document({
    sections: [{
      properties: {},
      children: children
    }]
  });

  // Generate and save
  const blob = await Packer.toBlob(doc);
  const filename = `${destination.replace(/\s/g, '_')}_Itinerary.docx`;
  saveAs(blob, filename);
}

/**
 * Share itinerary using Web Share API (mobile friendly)
 */
export async function shareItinerary(itineraryContent, destination, userPreferences) {
  const text = `Check out my ${destination} weekend itinerary!\n\n${itineraryContent}`;

  const shareData = {
    title: `${destination} - Weekend Itinerary`,
    text: text.substring(0, 500) + (text.length > 500 ? '...' : ''),
    url: window.location.href
  };

  if (navigator.share && navigator.canShare(shareData)) {
    try {
      await navigator.share(shareData);
      return { success: true };
    } catch (err) {
      if (err.name === 'AbortError') {
        return { success: false, error: 'Share cancelled' };
      }
      return { success: false, error: err.message };
    }
  } else {
    // Fallback: Copy to clipboard
    try {
      await navigator.clipboard.writeText(text);
      return { success: true, fallback: 'copied' };
    } catch (err) {
      return { success: false, error: 'Sharing not supported on this device' };
    }
  }
}

/**
 * Helper function to format dates
 */
function formatDate(dateString) {
  if (!dateString) return '';
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}
